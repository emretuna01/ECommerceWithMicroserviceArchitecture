// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderService.Infrastructure.Persistance.Context;

namespace OrderService.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("OrderService.Core.Domain.Entities.CatalogBrand", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.HasKey("ObjectId");

                    b.ToTable("CatalogBrands");

                    b.HasData(
                        new
                        {
                            ObjectId = new Guid("b643f7a0-152a-4eae-bc62-65a545e86414"),
                            Brand = "1.STATE"
                        },
                        new
                        {
                            ObjectId = new Guid("ffe44bbd-4067-4df4-9951-af18bb4de897"),
                            Brand = "1017 ALYX 9SM"
                        },
                        new
                        {
                            ObjectId = new Guid("99f300f4-b1a6-46c1-a051-28041c01cf27"),
                            Brand = "108 STITCHES"
                        },
                        new
                        {
                            ObjectId = new Guid("5b75ea9f-15b5-4a98-83d0-9bcb92968bc6"),
                            Brand = "11 Honoré"
                        },
                        new
                        {
                            ObjectId = new Guid("2c24445f-d667-40e7-bf14-a5756ddc55eb"),
                            Brand = "111SKIN"
                        },
                        new
                        {
                            ObjectId = new Guid("7028248c-898c-4556-88ef-5a97c8bd832f"),
                            Brand = "1822 Denim"
                        },
                        new
                        {
                            ObjectId = new Guid("20bcdb70-79f5-435d-aa47-d0b8ac3cb1af"),
                            Brand = "19 Cooper"
                        },
                        new
                        {
                            ObjectId = new Guid("bcc0e013-2dfb-44ba-b62b-9a0291ad1bea"),
                            Brand = "1901"
                        },
                        new
                        {
                            ObjectId = new Guid("7091c3b2-af12-4f06-bac6-6b1f5429eadc"),
                            Brand = "2 MONCLER 1952"
                        });
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.CatalogItem", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AvailableStock")
                        .HasColumnType("integer");

                    b.Property<int?>("CatalogBrandId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CatalogBrandObjectId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CatalogTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CatalogTypeObjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerCartObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("OnReorder")
                        .HasColumnType("boolean");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("text");

                    b.Property<string>("PictureUri")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("integer");

                    b.HasKey("ObjectId");

                    b.HasIndex("CatalogBrandObjectId");

                    b.HasIndex("CatalogTypeObjectId");

                    b.HasIndex("CustomerCartObjectId");

                    b.ToTable("CatalogItems");

                    b.HasData(
                        new
                        {
                            ObjectId = new Guid("5128152e-91a7-4a97-a791-f498d3df0188"),
                            AvailableStock = 500,
                            Description = "Books",
                            MaxStockThreshold = 0,
                            Name = "The Quarter Storm",
                            OnReorder = false,
                            Price = 0m,
                            RestockThreshold = 0
                        },
                        new
                        {
                            ObjectId = new Guid("52f8b963-32c9-4e8f-92f7-8ba1dedf1633"),
                            AvailableStock = 1500,
                            Description = "Books",
                            MaxStockThreshold = 0,
                            Name = "A Train to Moscow",
                            OnReorder = false,
                            Price = 0m,
                            RestockThreshold = 0
                        },
                        new
                        {
                            ObjectId = new Guid("6b2c1aff-6fcc-4f58-887b-4ae03b707ddd"),
                            AvailableStock = 2500,
                            Description = "Books",
                            MaxStockThreshold = 0,
                            Name = "Like Me",
                            OnReorder = false,
                            Price = 0m,
                            RestockThreshold = 0
                        },
                        new
                        {
                            ObjectId = new Guid("9d543736-0b47-439f-971f-f3eef007c97e"),
                            AvailableStock = 5100,
                            Description = "Books",
                            MaxStockThreshold = 0,
                            Name = "North to Paradise",
                            OnReorder = false,
                            Price = 0m,
                            RestockThreshold = 0
                        },
                        new
                        {
                            ObjectId = new Guid("ec6d438c-baa5-411f-86fc-5b9d4826ee52"),
                            AvailableStock = 499,
                            Description = "Books",
                            MaxStockThreshold = 0,
                            Name = "The Fallen Stones",
                            OnReorder = false,
                            Price = 0m,
                            RestockThreshold = 0
                        });
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.CatalogType", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("ObjectId");

                    b.ToTable("CatalogTypes");

                    b.HasData(
                        new
                        {
                            ObjectId = new Guid("26d4cfc2-b7c2-44a1-ad8b-ae4a65ee6b52"),
                            Type = "Automotive"
                        },
                        new
                        {
                            ObjectId = new Guid("ab84e035-f725-45ec-9610-0d9146086a50"),
                            Type = "Baby"
                        },
                        new
                        {
                            ObjectId = new Guid("5c42326c-2cad-4b54-8082-265831d6608f"),
                            Type = "Books"
                        },
                        new
                        {
                            ObjectId = new Guid("35eecd4f-4b4e-4f7a-a302-4b912e4d91c7"),
                            Type = "Computers"
                        },
                        new
                        {
                            ObjectId = new Guid("0faf2591-97cc-46f3-91d7-ad121ac3d819"),
                            Type = "Electronics"
                        },
                        new
                        {
                            ObjectId = new Guid("8a1f8803-2c7a-476f-87f7-5b730eff1ca9"),
                            Type = "Men's Fashion"
                        });
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.CustomerCart", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderItemObjectId")
                        .HasColumnType("uuid");

                    b.HasKey("ObjectId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("OrderItemObjectId");

                    b.ToTable("CustomerCarts");
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CardExpiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.Property<string>("CardSecurityNumber")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("ObjectId");

                    b.HasIndex("BuyerId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("ObjectId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ObjectId = new Guid("e0a07b35-e930-48dd-8629-abd8998b1dcb"),
                            Email = "admin@outlook.com",
                            Firstname = "admin",
                            Password = "admin"
                        },
                        new
                        {
                            ObjectId = new Guid("03e1e7f3-8dd3-4c4f-a381-672b3b7416f9"),
                            Email = "emretuna@outlook.com",
                            Firstname = "emre",
                            Password = "emre"
                        });
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.CatalogItem", b =>
                {
                    b.HasOne("OrderService.Core.Domain.Entities.CatalogBrand", "CatalogBrand")
                        .WithMany()
                        .HasForeignKey("CatalogBrandObjectId");

                    b.HasOne("OrderService.Core.Domain.Entities.CatalogType", "CatalogType")
                        .WithMany()
                        .HasForeignKey("CatalogTypeObjectId");

                    b.HasOne("OrderService.Core.Domain.Entities.CustomerCart", null)
                        .WithMany("Items")
                        .HasForeignKey("CustomerCartObjectId");

                    b.Navigation("CatalogBrand");

                    b.Navigation("CatalogType");
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.CustomerCart", b =>
                {
                    b.HasOne("OrderService.Core.Domain.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Core.Domain.Entities.OrderItem", null)
                        .WithMany("Carts")
                        .HasForeignKey("OrderItemObjectId");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OrderService.Core.Domain.Entities.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.CustomerCart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OrderService.Core.Domain.Entities.OrderItem", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
